{"version":3,"sources":["solver.ts","main.ts"],"names":[],"mappings":"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","file":"main.9a45cebe.js","sourceRoot":"..","sourcesContent":["const operators = ['+', '-', '*', '/'] as const;\ntype Operator = typeof operators[number];\n\ninterface OpNode {\n  left: OpNode | number;\n  right: OpNode | number;\n  operator: Operator;\n}\n\ninterface Fraction {\n  // p / q\n  p: number;  // numerator\n  q: number;  // denominator\n}\n\nconst isValidFraction = (f: Fraction) => f.q !== 0;\nconst isZeroFraction = (f: Fraction) => f.p === 0;\nconst gcd = (a: number, b: number): number => b === 0 ? a : gcd(b, a % b);\n\nconst reduce = (f: Fraction): Fraction => {\n  if (!isValidFraction(f)) {\n    throw new Error(`${f.p} / ${f.q} is invalid fraction`);\n  }\n  let {p, q} = f;\n  const g = gcd(p, q);\n  p /= g;\n  q /= g;\n  if (q < 0) {\n    p *= -1;\n    q *= -1;\n  }\n  return {p, q};\n};\n\nconst add = (f1: Fraction, f2: Fraction): Fraction => {\n  return reduce({\n    p: f1.p * f2.q + f1.q * f2.p,\n    q: f1.q * f2.q,\n  });\n};\n\nconst sub = (f1: Fraction, f2: Fraction): Fraction => {\n  return reduce({\n    p: f1.p * f2.q - f1.q * f2.p,\n    q: f1.q * f2.q,\n  });\n};\n\nconst mul = (f1: Fraction, f2: Fraction): Fraction => {\n  return reduce({\n    p: f1.p * f2.p,\n    q: f1.q * f2.q,\n  });\n};\n\nconst div = (f1: Fraction, f2: Fraction): Fraction => {\n  return reduce({\n    p: f1.p * f2.q,\n    q: f1.q * f2.p,\n  });\n};\n\nconst isSameFraction = (f1: Fraction, f2: Fraction) => isZeroFraction(sub(f1, f2));\n\nconst operatorMap = {\n  '+': add,\n  '-': sub,\n  '*': mul,\n  '/': div,\n} as const;\n\nconst number2Fraction = (n: number): Fraction => ({p: n, q: 1});\n\nconst evalNode = (node: OpNode | number): Fraction => {\n  if (typeof node === 'number') {\n    return number2Fraction(node);\n  } else {\n    return operatorMap[node.operator](evalNode(node.left), evalNode(node.right));\n  }\n};\n\nconst solve10puzzleFixedOrder = (n1: number, n2: number, n3: number, n4: number): OpNode[] => {\n  // console.log(n1, n2, n3, n4);\n  const ten: Fraction = number2Fraction(10);\n  const answers: OpNode[] = [];\n\n  for (const op1 of operators) {\n    for (const op2 of operators) {\n      for (const op3 of operators) {\n        // ( n1 op1 n2 ) op2 ( n3 op3 n4 )\n        const node1 = {\n          left: {\n            left: n1,\n            right: n2,\n            operator: op1,\n          },\n          right: {\n            left: n3,\n            right: n4,\n            operator: op3,\n          },\n          operator: op2,\n        };\n\n        // ( ( n1 op1 n2 ) op2 n3 ) op3 n4 \n        const node2: OpNode = {\n          left: {\n            left: {\n              left: n1,\n              right: n2,\n              operator: op1,\n            },\n            right: n3,\n            operator: op2,\n          },\n          right: n4,\n          operator: op3,\n        };\n\n        // n1 op1 ( n2 op2 ( n3 op3 n4 ) )\n        const node3: OpNode = {\n          left: n1,\n          right: {\n            left: n2,\n            right: {\n              left: n3,\n              right: n4,\n              operator: op3,\n            },\n            operator: op2,\n          },\n          operator: op1,\n        }\n\n        for (const node of [node1, node2, node3]) {\n          try {\n            if (isSameFraction(evalNode(node), ten)) {\n              answers.push(node);\n            }\n          } catch (e) {\n          }\n        }\n      }\n    }\n  }\n  return answers;\n};\n\nconst is4Num = (nums: number[]): nums is [number, number, number, number] => nums.length === 4;\n\nconst solve10puzzle_ = (accum: number[], rest: number[]): OpNode[] => {\n  if (rest.length === 0) {\n    if (!is4Num(accum)) {\n      throw Error();\n    }\n    return solve10puzzleFixedOrder(...accum);\n  } else {\n    const answers: OpNode[] = [];\n    for (let i = 0; i < rest.length; i++) {\n      const tmpAnswers = solve10puzzle_([...accum, rest[i]], [...rest.slice(0, i), ...rest.slice(i + 1)]);\n      answers.push(...tmpAnswers);\n    }\n    return answers;\n  }\n};\n\nconst solve10puzzle = (n1: number, n2: number, n3: number, n4: number): OpNode[] => {\n  return solve10puzzle_([], [n1, n2, n3, n4]);\n};\n\nconst operatorPriorityMap = {\n  '+': 1,\n  '-': 1,\n  '*': 2,\n  '/': 2,\n} as const;\n\nconst node2String = (node: OpNode | number): string => {\n  if (typeof node === 'number') {\n    return String(node);\n  } else {\n    const {left, right, operator} = node;\n    let leftString = node2String(left);\n    if (typeof left !== 'number' && operatorPriorityMap[left.operator] < operatorPriorityMap[operator]) {\n      leftString = `( ${leftString} )`;\n    }\n\n    let rightString = node2String(right);\n    if (typeof right !== 'number' && operatorPriorityMap[right.operator] < operatorPriorityMap[operator]) {\n      rightString = `( ${rightString} )`;\n    }\n\n    return `${leftString} ${operator} ${rightString}`;\n  }\n};\n\nexport {\n  solve10puzzle,\n  node2String,\n}\n\nexport type {\n  OpNode,\n}\n","import {\n  solve10puzzle,\n  node2String,\n} from './solver';\n\nimport type {\n  OpNode,\n} from './solver';\n\nconst getElemById = (id: string): HTMLElement => {\n  const elem = document.getElementById(id);\n  if (elem == null) throw Error(`id: ${id} is not found`);\n  return elem;\n};\n\nconst probElem = getElemById('problem');\nconst ansAreaElem = getElemById('answer-area');\nconst ansElem = getElemById('answer');\nconst allAnsElem = getElemById('all-answer');\n\nconst ansBtnElem = getElemById('answer-btn');\nconst nextBtnElem = getElemById('next-btn');\n\nconst nextProblem = () => {\n  let answers: OpNode[] = [];\n  let problem: [number, number, number, number] = [0, 0, 0, 0];\n\n  while (answers.length === 0) {\n    problem = [\n      Math.floor(Math.random() * 10),\n      Math.floor(Math.random() * 10),\n      Math.floor(Math.random() * 10),\n      Math.floor(Math.random() * 10),\n    ];\n    answers = solve10puzzle(...problem);\n  }\n  const answerStrings: string[] = [...new Set(answers.map(node2String))];\n\n  probElem.textContent = problem.join(' ');\n\n  ansAreaElem.style.display = 'none';\n  ansAreaElem.removeAttribute('open');\n\n  ansElem.textContent = answerStrings[0];\n\n  while (allAnsElem.firstChild) {\n    allAnsElem.removeChild(allAnsElem.firstChild);\n  }\n\n  answerStrings.forEach((ansString) => {\n    const newElem = document.createElement('li');\n    newElem.textContent = ansString;\n    allAnsElem.appendChild(newElem);\n  });\n\n};\n\nansBtnElem.addEventListener('click', () => {\n  ansAreaElem.style.display = 'block';\n});\n\nnextBtnElem.addEventListener('click', () => {\n  nextProblem();\n});\n\n// for first problem\nnextProblem();\n"]}